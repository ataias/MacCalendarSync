name: Create Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  release:
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "6.1"

    - name: Get swift version
      run: swift --version

    - name: Generate version tag
      id: version
      run: |
        DATE=$(date +"%Y.%m.%d")
        echo "date=$DATE" >> $GITHUB_OUTPUT
        
        # Get existing releases for today
        EXISTING_RELEASES=$(gh release list --limit 100 --json tagName --jq ".[] | select(.tagName | startswith(\"$DATE.\")) | .tagName" | wc -l || echo "0")
        COUNT=$((EXISTING_RELEASES + 1))
        
        VERSION_TAG="$DATE.$COUNT"
        echo "tag=$VERSION_TAG" >> $GITHUB_OUTPUT
        echo "Generated version tag: $VERSION_TAG"
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Check if release already exists
      id: check_release
      run: |
        if gh release view "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release ${{ steps.version.outputs.tag }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release ${{ steps.version.outputs.tag }} does not exist"
        fi
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Build and test
      if: steps.check_release.outputs.exists == 'false'
      run: |
        swift build -c release
        swift test --enable-swift-testing

    - name: Create release
      if: steps.check_release.outputs.exists == 'false'
      run: |
        # Get recent commits for release notes
        LAST_RELEASE=$(gh release list --limit 1 --json tagName --jq ".[0].tagName" || echo "")
        
        if [ -n "$LAST_RELEASE" ]; then
          COMMITS=$(git log --oneline ${LAST_RELEASE}..HEAD --pretty=format:"- %s" || git log --oneline -n 5 --pretty=format:"- %s")
        else
          COMMITS=$(git log --oneline -n 5 --pretty=format:"- %s")
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        # MacCalendarSync ${{ steps.version.outputs.tag }}
        
        Automated release created on ${{ steps.version.outputs.date }}.
        
        ## Changes
        $COMMITS
        
        ## Installation
        
        ### Homebrew (Recommended)
        \`\`\`bash
        brew tap ataias/mac-calendar-sync
        brew install mac-calendar-sync
        \`\`\`
        
        ### Manual Installation
        1. Download the source code from this release
        2. Extract and run:
        \`\`\`bash
        make install
        \`\`\`
        
        ## Requirements
        - macOS 15.0 or later
        - Swift 6.0 or later (for building from source)
        EOF
        
        # Create the release
        gh release create "${{ steps.version.outputs.tag }}" \
          --title "MacCalendarSync ${{ steps.version.outputs.tag }}" \
          --notes-file release_notes.md \
          --generate-notes
      env:
        GH_TOKEN: ${{ github.token }}